with "switches";

project SXML
is
   type Mode_Type is ("strict", "sloppy", "debug", "stack", "fuzz");
   Mode : Mode_Type := external ("Mode", "strict");

   case Mode is
      when "strict" | "stack" | "fuzz" =>
         for Source_Dirs use ("src");
      when "debug" =>
         for Source_Dirs use ("src", "tests/debug");
      when others => null;
   end case;

   for Object_Dir use "obj";

   for Library_Name use "sxml";
   for Library_Kind use "dynamic";
   for Library_Dir use "obj/adalib";

   package Builder is
      case Mode is
         when "strict" | "stack" =>
            for Global_Configuration_Pragmas use "default.adc";
         when "fuzz" =>
            for Global_Configuration_Pragmas use "fuzz.adc";
         when "debug" =>
            for Global_Configuration_Pragmas use "debug.adc";
         when others =>
            null;
      end case;
   end Builder;

   package Compiler is
      case Mode is
         when "strict" =>
            for Default_Switches ("Ada") use Switches.Compiler_Switches;
         when "stack" =>
            for Default_Switches ("Ada") use Switches.Compiler_Switches & "-fcallgraph-info=su,da";
         when "debug" | "fuzz" =>
            for Default_Switches ("Ada") use Switches.Compiler_Switches & Switches.Compiler_Debug_Switches;
         when others =>
            null;
      end case;
   end Compiler;

   package Check is
      for Default_Switches ("Ada") use ("-rules", "-from=rules.gck");
   end Check;

   package Stack is
      --  The stack depth of external functions (-u) must be validated
      for Switches use ("-Wa", "-a", "-p", "-ca", "-x", "-u64");
   end Stack;

   package Documentation is
      for Documentation_Dir use "doc/api";
   end Documentation;

end SXML;
